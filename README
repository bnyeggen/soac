Java object overhead can be killer when dealing with large amounts of data.
Because of the way Java allocates arrays, the only real way to get around the
object overhead for a large number of small objects is to represent them as a
Struct-Of-(primitive) Arrays, rather than an Array (or Seq)-Of-Structs.

You can think of hash tables as a specialization of this, since they store a
sequence of key-value pairs, arranged for fast lookup/insertion/removal.

Two families of data structures are provided to deal with these two issues:
the SOAs (mutable, and immutable via COW) in soac.core, and the hash tables
(both maps and sets) in soac.hopscotch.

You should expect large memory savings (the primitive-backed hash sets, for
instance, take between 1/5 and 1/6 of the space of an equivalent
PersistentHashSet) at the cost of some additional insertion time.  Lookups
and removals should in general be as fast or faster.

TODO:
- Vector-of based SOA
- Reducer support for SOAs
- Reducer support for PersistentPrimHashMap
- Transient support for hopscotch